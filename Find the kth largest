// use minheap, notice that python has built-in min heap
// just keep the heap size of k is enough; 
//Review: for min heap, get min is O(1), ADD/REMOVE IS LOG(n)
class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.minHeap,self.k=nums,k
        heapq.heapify(self.minHeap)
        while len(self.minHeap) > k:
            heapq.heappop(self.minHeap)

    def add(self, val: int) -> int:
        heapq.heappush(self.minHeap, val)
        if len(self.minHeap) > self.k:
            heapq.heappop(self.minHeap)

        return self.minHeap[0]
